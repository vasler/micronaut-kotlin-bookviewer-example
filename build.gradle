plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
    id "org.jetbrains.kotlin.kapt" version "1.3.72"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.72"
    id "application"
    id "com.google.cloud.tools.jib" version "2.1.0"
}

version "0.1"
group "com.vasler.bookviewer"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut:micronaut-validation")
    kapt("io.micronaut:micronaut-graal")
    kapt("io.micronaut.data:micronaut-data-processor")
    kapt("io.micronaut.security:micronaut-security-annotations")
    compileOnly(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    compileOnly("org.graalvm.nativeimage:svm")
    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
//    implementation("io.micronaut.sql:micronaut-jdbc-dbcp")
    implementation("io.micronaut.data:micronaut-data-jdbc")
//    implementation("io.micronaut.data:micronaut-data-hibernate-jpa:2.0.0")

    implementation("io.micronaut.security:micronaut-security-jwt")


    implementation("io.micronaut.graphql:micronaut-graphql")
    implementation("io.micronaut.redis:micronaut-redis-lettuce")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    implementation("io.micronaut.sql:micronaut-jdbi")
    implementation("org.apache.logging.log4j:log4j-core:2.12.1")
    runtimeOnly("org.apache.logging.log4j:log4j-api:2.12.1")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.12.1")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")
    runtimeOnly("org.postgresql:postgresql")
    kaptTest(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))
    kaptTest("io.micronaut:micronaut-inject-java")
    testImplementation(enforcedPlatform("io.micronaut:micronaut-bom:$micronautVersion"))

    implementation("io.micronaut.cache:micronaut-cache-core")


//    testImplementation("io.mockk:mockk:1.9.3")
//    testImplementation("io.micronaut.test:micronaut-test-kotest")
//    testImplementation("io.kotest:kotest-runner-junit5-jvm:4.1.3")
//    testImplementation("io.kotest:kotest-assertions-core-jvm:4.1.3")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")

    testImplementation(platform("org.testcontainers:testcontainers-bom:1.14.3"))
    testRuntimeOnly("org.testcontainers:postgresql")

    // https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox
    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.21'

    compile 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtime 'io.jsonwebtoken:jjwt-impl:0.11.2',
            // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
            //'org.bouncycastle:bcprov-jdk15on:1.60',
            'io.jsonwebtoken:jjwt-jackson:0.11.2'
            // or 'io.jsonwebtoken:jjwt-gson:0.11.2' for gson
}

test.classpath += configurations.developmentOnly

mainClassName = "com.vasler.bookviewer.ApplicationKt"

// use JUnit 5 platform
test {
    exclude '**/*'
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}
kapt {
    arguments {
        arg("micronaut.processing.incremental", true)
        arg("micronaut.processing.annotations", "com.vasler.bookviewer.*")
        arg("micronaut.processing.group", "com.vasler.bookviewer")
        arg("micronaut.processing.module", "bookviewer")
    }
}


tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
            'micronaut.io.watch.restart':'true',
            'micronaut.io.watch.enabled':'true',
            "micronaut.io.watch.paths":"src/main"
        )
    }
}

jib.to.image = 'gcr.io/bookviewer/jib-image'

